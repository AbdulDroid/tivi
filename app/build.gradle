/*
 * Copyright 2017 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

ext {
    ci = System.getenv("CI") == "true"
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
kapt {
    correctErrorTypes = true
}
apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.getkeepsafe.dexcount'
dexcount {
    // Only run the method counter on CI
    runOnEachPackage = ci
}

apply plugin: 'com.github.triplet.play'
play {
    track = 'internal'
    uploadImages = true
}

if (file("google-services.json").exists()) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'io.fabric'
}

def appVersionCode = propOrDef("tivi.versioncode", 17) as Integer
println("APK version code: " + appVersionCode)

android {
    compileSdkVersion BuildConfigs.compileSdk

    playAccountConfigs {
        defaultAccountConfig {
            serviceAccountEmail = propOrDef('TIVI_PLAY_PUBLISHER_ACCOUNT', "")
            jsonFile = rootProject.file('signing/play-account.json')
        }
    }

    defaultConfig {
        applicationId ApplicationId.application_id
        minSdkVersion BuildConfigs.minSdk
        targetSdkVersion BuildConfigs.targetSdk
        versionCode Releases.version_code
        versionName Releases.version

        // For now we're sticking to just shipping EN
        resConfigs "en"

        testInstrumentationRunner Config.testRunner

        playAccountConfig = playAccountConfigs.defaultAccountConfig

        buildConfigField "String", "TRAKT_CLIENT_ID", "\"" + propOrDef("TIVI_TRAKT_CLIENT_ID", "") + "\""
        buildConfigField "String", "TRAKT_CLIENT_SECRET", "\"" + propOrDef("TIVI_TRAKT_CLIENT_SECRET", "") + "\""
        buildConfigField "String", "TMDB_API_KEY", "\"" + propOrDef("TIVI_TMDB_API_KEY", "") + "\""

        manifestPlaceholders += ['appAuthRedirectScheme': 'app.tivi']
    }

    signingConfigs {
        debug {
            storeFile rootProject.file("signing/app-debug.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        release {
            storeFile rootProject.file("signing/app-release.jks")
            storePassword propOrDef('TIVI_RELEASE_KEYSTORE_PWD', "")
            keyAlias "tivi"
            keyPassword propOrDef('TIVI_RELEASE_KEY_PWD', "")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        // Don't pre-dex on CI
        preDexLibraries !ci
    }

    lintOptions {
        // Disable lintVital. Not needed since lint is run on CI
        checkReleaseBuilds false
        
        disable 'GradleCompatible'
    }

    dataBinding {
        enabled = true
    }

    packagingOptions {
        exclude 'kotlin/**'
        exclude '**/*.kotlin_metadata'
        exclude 'META-INF/*.kotlin_module'
        exclude 'META-INF/*.version'
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            versionNameSuffix "-dev [${getGitHash()}]"
            applicationIdSuffix ".debug"
        }

        release {
            signingConfig signingConfigs.release
            shrinkResources true
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation project(Modules.base)
    implementation project(Modules.baseAndroid)
    implementation project(Modules.data)
    implementation project(Modules.dataAndroid)
    implementation project(Modules.trakt)
    implementation project(Modules.traktAuth)
    implementation project(Modules.tmdb)
    implementation project(Modules.interactors)
    implementation project(Modules.tasks)

    implementation Libraries.lifecycle_extensions
    implementation Libraries.lifecycle_reactivestreams
    kapt Libraries.lifecycle_compiler

    implementation Libraries.paging_runtime
    implementation Libraries.paging_rxjava2

    implementation Libraries.appcompat
    implementation Libraries.design
    implementation Libraries.customtabs
    implementation Libraries.palette
    implementation Libraries.recyclerview
    implementation Libraries.emoji

    implementation(Libraries.work) {
        // We have to exclude this since it wants 1.1.1-rc1 and we're using 1.1.1
        exclude group: 'android.arch.persistence.room', module: 'runtime'
    }

    implementation Libraries.constraint_layout

    implementation Libraries.core_ktx

    implementation Libraries.threetenabp

    implementation Libraries.rxjava
    implementation Libraries.rxkotlin
    implementation Libraries.rxandroid

    implementation Libraries.rxbroadcast

    implementation Libraries.coroutines

    implementation Libraries.dagger
    implementation Libraries.dagger_android
    kapt Libraries.dagger_compiler
    kapt Libraries.dagger_processor

    implementation Libraries.glide
    kapt Libraries.glide_compiler

    implementation Libraries.epoxy
    implementation Libraries.epoxy_paging
    implementation Libraries.epoxy_databinding
    kapt Libraries.epoxy_processor

    testImplementation TestLibraries.junit

    androidTestImplementation TestLibraries.runner
    androidTestImplementation TestLibraries.rules
    androidTestImplementation TestLibraries.espresso
    androidTestImplementation TestLibraries.room
    androidTestImplementation TestLibraries.mockito_dexmaker

    debugImplementation Libraries.rxlint

    implementation Libraries.firebase_core
    implementation Libraries.crashlytics
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
